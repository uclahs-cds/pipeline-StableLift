
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/store_object_as_json/store_object_as_json.config"
includeConfig "${projectDir}/config/base.config"

import nextflow.Nextflow

methods {
    // Set the output and log output dirs here.
    set_output_dir = {
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", TimeZone.getTimeZone('UTC'))

        params.output_dir_base = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id.replace(' ', '_')}/StableLift-${manifest.version}"
        params.log_output_dir = "${params.output_dir_base}/log-${manifest.name}-${manifest.version}-${date}"
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }

    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    expand_parameters = {
        // Make sure the user didn't set any of the advanced parameters
        def advanced_parameters = [
            'src_fasta_id',
            'src_fasta_ref',
            'src_fasta_fai',
            'src_fasta_dict',
            'dest_fasta_id',
            'dest_fasta_ref',
            'dest_fasta_fai',
            'dest_fasta_dict',
            'chain_file',
            'repeat_bed',
            'header_contigs',
            'funcotator_data_source',
            'gnomad_rds'
        ]

        for (key in advanced_parameters) {
            if (params.containsKey(key)) {
                throw new Exception("Do not directly set params.${key} - the value will be inferred from params.liftover_direction")
            }
        }

        def liftover_direction  = params.getOrDefault('liftover_direction', null)

        def forward  = "GRCh37ToGRCh38"
        def backward = "GRCh38ToGRCh37"

        if (liftover_direction in [forward, backward]) {
            if (liftover_direction == forward) {
                params.src_fasta_id = 'GRCh37'
                params.src_fasta_ref = params.fasta_ref_37

                params.dest_fasta_id = 'GRCh38'
                params.dest_fasta_ref = params.fasta_ref_38

                params.chain_file = params.resource_bundle_path + "/hg19ToHg38.over.chain"
                params.repeat_bed = params.resource_bundle_path + "/GRCh38_RepeatMasker-intervals.bed"
                params.header_contigs = params.resource_bundle_path + "/GRCh38_VCF-header-contigs.txt"
            } else {
                params.src_fasta_id = 'GRCh38'
                params.src_fasta_ref = params.fasta_ref_38

                params.dest_fasta_id = 'GRCh37'
                params.dest_fasta_ref = params.fasta_ref_37

                params.chain_file = params.resource_bundle_path + "/hg38ToHg19.over.chain"
                params.repeat_bed = params.resource_bundle_path + "/GRCh37_RepeatMasker-intervals.bed"
                params.header_contigs = params.resource_bundle_path + "/GRCh37_VCF-header-contigs.txt"
            }

            params.src_fasta_fai = params.src_fasta_ref + ".fai"
            params.dest_fasta_fai = params.dest_fasta_ref + ".fai"

            params.src_fasta_dict = Nextflow.file(params.src_fasta_ref).resolveSibling(Nextflow.file(params.src_fasta_ref).getBaseName() + '.dict').toString()
            params.dest_fasta_dict = Nextflow.file(params.dest_fasta_ref).resolveSibling(Nextflow.file(params.dest_fasta_ref).getBaseName() + '.dict').toString()

            params.funcotator_data_source = params.resource_bundle_path + "/funcotator_dataSources.v1.7.20200521s_StableLift"
            params.gnomad_rds = params.resource_bundle_path + "/gnomad.v4.0.sv.Rds"
        }
    }


    setup = {
        methods.expand_parameters()

        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()

        // Validate the branch-specific parameters
        if (params.variant_caller == "Delly2-gSV" || params.variant_caller == "Delly2-sSV") {
            schema.validate("${projectDir}/config/schema-sv.yaml")
        } else {
            schema.validate("${projectDir}/config/schema-snv.yaml")
        }

        methods.set_output_dir()
        methods.modify_base_allocations()
        methods.set_pipeline_logs()
        methods.set_env()
        methods.setup_docker_cpus()
        methods.setup_process_afterscript()

        json_extractor.store_object_as_json(
            params,
            new File("${params.log_output_dir}/nextflow-log/params.json")
        )
    }
}
