
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/store_object_as_json/store_object_as_json.config"

methods {
    // Set the output and log output dirs here.
    set_output_dir = {
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", TimeZone.getTimeZone('UTC'))

        params.output_dir_base = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id.replace(' ', '_')}/StableLift-${manifest.version}"
        params.log_output_dir = "${params.output_dir_base}/log-${manifest.name}-${manifest.version}-${date}"
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }

    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    determine_liftover_direction = {
        if (params.funcotator_data.src_reference_id == params.funcotator_data.dest_reference_id) {
            throw new IllegalArgumentException("params.funcotator_data.src_reference_id and params.funcotator_data.dest_reference_id must be different!")
        }

        if (![params.funcotator_data.src_reference_id, params.funcotator_data.dest_reference_id].contains("hg38")) {
            throw new IllegalArgumentException("One of params.funcotator_data.src_reference_id and params.funcotator_data.dest_reference_id must be 'hg38'!")
        }

        params.liftover_forward = params.funcotator_data.dest_reference_id == "hg38"
    }

    setup = {
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()

        methods.set_output_dir()
        methods.set_resources_allocation()
        methods.modify_base_allocations()
        methods.set_pipeline_logs()
        methods.set_env()
        methods.setup_docker_cpus()
        methods.setup_process_afterscript()

        methods.determine_liftover_direction()

        json_extractor.store_object_as_json(
            params,
            new File("${params.log_output_dir}/nextflow-log/params.json")
        )
    }
}
