import nextflow.Nextflow

/**
* This custom schema namespace implements a custom type for Funcotator data sources.
*/
custom_schema_types {

    /**
    * Check that input refers to a properly configured Funcotator data source
    * directory
    */
    check_funcotator_data_source = { Map options, String name, Map properties ->
        if (!(options[name] in Map)) {
            throw new Exception("${name} should be a Map, not ${options[name].getClass()}.")
        }

        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements[entry.key])
        }

        /*
        Confirm that the destination reference sequence ID is a valid subfolder
        in at least _one_ of the data sources. A reference-specific data source
        directory requires a .config file at a path like:

        dataSourcesFolder/<sourcename>/hg19/<name>.config
        dataSourcesFolder/<sourcename>/hg38/<name>.config

        There can be mulitple <sourcename> folders, but there should be only
        one config per reference-specific subfolder.
        */
        config_glob = [
            options[name].data_source,
            "*",
            options[name].dest_reference_id,
            "*.config"
        ].join("/")

        if (!Nextflow.file(config_glob)) {
            throw new Exception("${name} is improperly configured - no files found matching '${config_glob}'")
        }
    }

    /**
    * Check that the input is numeric in the appropriate range.
    */
    ranged_number = { Map options, String name, Map properties ->
        if (!(properties.containsKey('min') && properties['min'] in Number)) {
            throw new Exception('`min` parameter misconfigured - must be a Number.')
        }

        if (!(properties.containsKey('max') && properties['max'] in Number)) {
            throw new Exception('`max` parameter misconfigured - must be a Number.')
        }

        if (!(options[name] in Number)) {
            throw new Exception("${name} must be a Number, not ${options[name].getClass()}")
        }

        if (options[name] < properties.min || properties.max < options[name]) {
            throw new Exception("${name}=${options[name]} is not in range [${properties.min}, ${properties.max}]")
        }
    }

    types = [
        'FuncotatorDataSource': custom_schema_types.check_funcotator_data_source,
        'RangedNumber': custom_schema_types.ranged_number
    ]
}
